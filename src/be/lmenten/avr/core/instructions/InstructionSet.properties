ADC=Add with carry
ADD=Add without carry
ADIW=Add immediate to word
AND=Logical AND
ANDI=Logical AND with immediate
ASR=Arithmetic shift right
BCLR=Bit clear in SREG
BLD=Bit load from the T flag in SREG to bit in register
BRBC=Branch if bit in SREG is cleared
BRBS=Branch if bit in SREG is set
BRCC=Branch if Carry flag is cleared
BRCS=Branch if Carry flag is set
BREAK=On-chip debugger break
BREQ=Branch if equal [Zero flag is set]
BRGE=Branch if greater of equal (signed) [Sign flag is cleared]
BRHC=Branch if Half Carry flag is cleared
BRHS=Branch if Half Carry flag is set
BRID=Branch if Interrupt flag is cleared
BRIE=Branch if Interrupt flag is set
BRLO=Branch if lower (unsigned) [Carry flag is set]
BRLT=Branch if less than (signed) [Sign flag s set]
BRMI=Branch if minus [Negative flag set]
BRNE=Branch if not equal [Zero flag is cleared]
BRPL=Branch if plus [Negative flag set]
BRSH=Branch if same or higher (unsigned) [Carry flag is cleared]
BRTC=Branch if T flag is cleared
BRTS=Branch if T flag is set
BRVC=Branch if Overflow flag is cleared
BRVS=Branch if Overflow flag is set
BSET=Bit set in SREG
BST=Bit store from bit in register to T flag in SREG
CALL=Long call to a subroutine
CBI=Clear bit in I/O register
CBR=Clear bits in register
CLC=Clear Carry flag
CLH=Clear Half Carry flag
CLI=Clear Interrupt flag
CLN=Clear Negative flag
CLR=Clear register
CLS=Clear sign flag
CLT=Clear T flag
CLV=Clear Overflow flag
CLZ=Clear Zero flag
COM=One's complement
CP=Compare
CPC=Compare with carry
CPI=Compare with immediate
CPSE=Compare and skip if equal
DEC=Decrement
DES=Data Encryption Standard
EICALL=Extended indirect call to subroutine
EIJMP=Extended indirect jump
ELPM=Extended load from program memory
EOR=Logical exclusive OR
FMUL=Fractional multiply (unsigned)
FMULS=Fractional multiply (signed)
FMULSU=Fractional multiply (signed with unsigned)
ICALL=Indirect call to subroutine
IJMP=Indirect jump
IN=Load an I/O location to register
INC=Increment
JMP=Jump
LAC=Load from data space (indirect using Z index) and clear
LAS=Load from data space (indirect using Z index) and set
LAT=Load from data space (indirect using Z index) and toggle
LD=Load indirect from data space using X, Y or Z index
LDD=Load indirect from data space using Y or Z index with displacement
LDI=Load immediate
LDS=Load direct from data space
LPM=Load from program memory
LSL=Logical shift left
LSR=Logical shift right
MOV=Copy register
MOVW=Copy register pair
MUL=Multiply (unsigned)
MULS=Multiply (signed)
MULSU=Multiply (signed with unsigned)
NEG=Two's complement
NOP=No operation
OR=Logical OR
ORI=Logical OR with immediate
OUT=Store register to I/O location
POP=Pop register from stack
PUSH=Push register on stack
RCALL=Relative call
RET=Return from subroutine
RETI=Return from interrupt
RJMP=Relative jump
ROL=Rotate left through Carry flag
ROR=Rotate right through Carry flag
SBC=Subtract with carry
SBCI=Subtract immediate with carry
SBI=Set bit in I/O register
SBIC=Skip if bit in I/O register is cleared
SBIS=Skip if bit in I/O register is set
SBIW=Subtract immediate from register pair
SBR=Set bit in register
SBRC=Skip if bit in register is cleared
SBRS=Skip if bit in register is set
SEC= Set Carry flag
SEH=Set Half Carry flag
SEI=Set Interrupt flag
SEN=Set Negative flag
SER=Set all bits in register
SES=Set Sign flag
SET=Set T flag
SEV=Set Overflow flag
SEZ=Set Zero flag
SLEEP=Set circuit in sleep mode according to MCU Control Register
SPM=Store to program memory
ST=Store indirect to data space using X, Y or Z index
STD=Store indirect to data space using Y or Z index with displacement
STS=Store direct to data space
SUB=Subtract without carry
SUBI=Subtract immediate
SWAP=Swap nibbles
TST=Test for zero or minus
WDR=Watchdog timer reset
XCH=Exchange between register and data space (indirect using Z index)
DATA=
