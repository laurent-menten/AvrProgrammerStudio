/* This file was generated by SableCC (http://www.sablecc.org/). */

package be.lmenten.avr.assembler.parser.node;

import be.lmenten.avr.assembler.parser.analysis.*;

@SuppressWarnings("nls")
public final class AOffsetExpr extends PExpr
{
    private TIdentifier _struct_;
    private TIdentifier _member_;

    public AOffsetExpr()
    {
        // Constructor
    }

    public AOffsetExpr(
        @SuppressWarnings("hiding") TIdentifier _struct_,
        @SuppressWarnings("hiding") TIdentifier _member_)
    {
        // Constructor
        setStruct(_struct_);

        setMember(_member_);

    }

    @Override
    public Object clone()
    {
        return new AOffsetExpr(
            cloneNode(this._struct_),
            cloneNode(this._member_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOffsetExpr(this);
    }

    public TIdentifier getStruct()
    {
        return this._struct_;
    }

    public void setStruct(TIdentifier node)
    {
        if(this._struct_ != null)
        {
            this._struct_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._struct_ = node;
    }

    public TIdentifier getMember()
    {
        return this._member_;
    }

    public void setMember(TIdentifier node)
    {
        if(this._member_ != null)
        {
            this._member_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._member_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._struct_)
            + toString(this._member_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._struct_ == child)
        {
            this._struct_ = null;
            return;
        }

        if(this._member_ == child)
        {
            this._member_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._struct_ == oldChild)
        {
            setStruct((TIdentifier) newChild);
            return;
        }

        if(this._member_ == oldChild)
        {
            setMember((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
