/* This file was generated by SableCC (http://www.sablecc.org/). */

package be.lmenten.avr.assembler.parser.node;

import be.lmenten.avr.assembler.parser.analysis.*;

@SuppressWarnings("nls")
public final class AAddressExpr extends PExpr
{
    private TIdentifier _register_;

    public AAddressExpr()
    {
        // Constructor
    }

    public AAddressExpr(
        @SuppressWarnings("hiding") TIdentifier _register_)
    {
        // Constructor
        setRegister(_register_);

    }

    @Override
    public Object clone()
    {
        return new AAddressExpr(
            cloneNode(this._register_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddressExpr(this);
    }

    public TIdentifier getRegister()
    {
        return this._register_;
    }

    public void setRegister(TIdentifier node)
    {
        if(this._register_ != null)
        {
            this._register_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._register_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._register_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._register_ == child)
        {
            this._register_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._register_ == oldChild)
        {
            setRegister((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
