/* This file was generated by SableCC (http://www.sablecc.org/). */

package be.lmenten.avr.assembler.parser.analysis;

import java.util.*;

import be.lmenten.avr.assembler.parser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PLine> copy = new ArrayList<PLine>(node.getLine());
            Collections.reverse(copy);
            for(PLine e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAEmptyLine(AEmptyLine node)
    {
        defaultIn(node);
    }

    public void outAEmptyLine(AEmptyLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLine(AEmptyLine node)
    {
        inAEmptyLine(node);
        outAEmptyLine(node);
    }

    public void inALabelLine(ALabelLine node)
    {
        defaultIn(node);
    }

    public void outALabelLine(ALabelLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelLine(ALabelLine node)
    {
        inALabelLine(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outALabelLine(node);
    }

    public void inACodeLine(ACodeLine node)
    {
        defaultIn(node);
    }

    public void outACodeLine(ACodeLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACodeLine(ACodeLine node)
    {
        inACodeLine(node);
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
        }
        outACodeLine(node);
    }

    public void inADbLine(ADbLine node)
    {
        defaultIn(node);
    }

    public void outADbLine(ADbLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADbLine(ADbLine node)
    {
        inADbLine(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getData());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outADbLine(node);
    }

    public void inADwLine(ADwLine node)
    {
        defaultIn(node);
    }

    public void outADwLine(ADwLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADwLine(ADwLine node)
    {
        inADwLine(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getData());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outADwLine(node);
    }

    public void inADdLine(ADdLine node)
    {
        defaultIn(node);
    }

    public void outADdLine(ADdLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADdLine(ADdLine node)
    {
        inADdLine(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getData());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outADdLine(node);
    }

    public void inADqLine(ADqLine node)
    {
        defaultIn(node);
    }

    public void outADqLine(ADqLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADqLine(ADqLine node)
    {
        inADqLine(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getData());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outADqLine(node);
    }

    public void inAReserveLine(AReserveLine node)
    {
        defaultIn(node);
    }

    public void outAReserveLine(AReserveLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReserveLine(AReserveLine node)
    {
        inAReserveLine(node);
        if(node.getSize() != null)
        {
            node.getSize().apply(this);
        }
        outAReserveLine(node);
    }

    public void inASetLine(ASetLine node)
    {
        defaultIn(node);
    }

    public void outASetLine(ASetLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetLine(ASetLine node)
    {
        inASetLine(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASetLine(node);
    }

    public void inAUnsetLine(AUnsetLine node)
    {
        defaultIn(node);
    }

    public void outAUnsetLine(AUnsetLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsetLine(AUnsetLine node)
    {
        inAUnsetLine(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAUnsetLine(node);
    }

    public void inAEquLine(AEquLine node)
    {
        defaultIn(node);
    }

    public void outAEquLine(AEquLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquLine(AEquLine node)
    {
        inAEquLine(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAEquLine(node);
    }

    public void inAOrgLine(AOrgLine node)
    {
        defaultIn(node);
    }

    public void outAOrgLine(AOrgLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrgLine(AOrgLine node)
    {
        inAOrgLine(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAOrgLine(node);
    }

    public void inACsegLine(ACsegLine node)
    {
        defaultIn(node);
    }

    public void outACsegLine(ACsegLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsegLine(ACsegLine node)
    {
        inACsegLine(node);
        outACsegLine(node);
    }

    public void inADsegLine(ADsegLine node)
    {
        defaultIn(node);
    }

    public void outADsegLine(ADsegLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADsegLine(ADsegLine node)
    {
        inADsegLine(node);
        outADsegLine(node);
    }

    public void inAEsegLine(AEsegLine node)
    {
        defaultIn(node);
    }

    public void outAEsegLine(AEsegLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEsegLine(AEsegLine node)
    {
        inAEsegLine(node);
        outAEsegLine(node);
    }

    public void inAPrologLine(APrologLine node)
    {
        defaultIn(node);
    }

    public void outAPrologLine(APrologLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrologLine(APrologLine node)
    {
        inAPrologLine(node);
        if(node.getKeyword() != null)
        {
            node.getKeyword().apply(this);
        }
        outAPrologLine(node);
    }

    public void inAEndprologLine(AEndprologLine node)
    {
        defaultIn(node);
    }

    public void outAEndprologLine(AEndprologLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndprologLine(AEndprologLine node)
    {
        inAEndprologLine(node);
        if(node.getKeyword() != null)
        {
            node.getKeyword().apply(this);
        }
        outAEndprologLine(node);
    }

    public void inAAdcInstruction(AAdcInstruction node)
    {
        defaultIn(node);
    }

    public void outAAdcInstruction(AAdcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdcInstruction(AAdcInstruction node)
    {
        inAAdcInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAAdcInstruction(node);
    }

    public void inAAddInstruction(AAddInstruction node)
    {
        defaultIn(node);
    }

    public void outAAddInstruction(AAddInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddInstruction(AAddInstruction node)
    {
        inAAddInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAAddInstruction(node);
    }

    public void inAAdiwInstruction(AAdiwInstruction node)
    {
        defaultIn(node);
    }

    public void outAAdiwInstruction(AAdiwInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdiwInstruction(AAdiwInstruction node)
    {
        inAAdiwInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAAdiwInstruction(node);
    }

    public void inAAndInstruction(AAndInstruction node)
    {
        defaultIn(node);
    }

    public void outAAndInstruction(AAndInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndInstruction(AAndInstruction node)
    {
        inAAndInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAAndInstruction(node);
    }

    public void inAAndiInstruction(AAndiInstruction node)
    {
        defaultIn(node);
    }

    public void outAAndiInstruction(AAndiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndiInstruction(AAndiInstruction node)
    {
        inAAndiInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAAndiInstruction(node);
    }

    public void inAAsrInstruction(AAsrInstruction node)
    {
        defaultIn(node);
    }

    public void outAAsrInstruction(AAsrInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsrInstruction(AAsrInstruction node)
    {
        inAAsrInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAAsrInstruction(node);
    }

    public void inABclrInstruction(ABclrInstruction node)
    {
        defaultIn(node);
    }

    public void outABclrInstruction(ABclrInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABclrInstruction(ABclrInstruction node)
    {
        inABclrInstruction(node);
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        outABclrInstruction(node);
    }

    public void inABldInstruction(ABldInstruction node)
    {
        defaultIn(node);
    }

    public void outABldInstruction(ABldInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABldInstruction(ABldInstruction node)
    {
        inABldInstruction(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outABldInstruction(node);
    }

    public void inABrbcInstruction(ABrbcInstruction node)
    {
        defaultIn(node);
    }

    public void outABrbcInstruction(ABrbcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrbcInstruction(ABrbcInstruction node)
    {
        inABrbcInstruction(node);
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrbcInstruction(node);
    }

    public void inABrbsInstruction(ABrbsInstruction node)
    {
        defaultIn(node);
    }

    public void outABrbsInstruction(ABrbsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrbsInstruction(ABrbsInstruction node)
    {
        inABrbsInstruction(node);
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrbsInstruction(node);
    }

    public void inABreakInstruction(ABreakInstruction node)
    {
        defaultIn(node);
    }

    public void outABreakInstruction(ABreakInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakInstruction(ABreakInstruction node)
    {
        inABreakInstruction(node);
        outABreakInstruction(node);
    }

    public void inABreqInstruction(ABreqInstruction node)
    {
        defaultIn(node);
    }

    public void outABreqInstruction(ABreqInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreqInstruction(ABreqInstruction node)
    {
        inABreqInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABreqInstruction(node);
    }

    public void inABrgeInstruction(ABrgeInstruction node)
    {
        defaultIn(node);
    }

    public void outABrgeInstruction(ABrgeInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrgeInstruction(ABrgeInstruction node)
    {
        inABrgeInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrgeInstruction(node);
    }

    public void inABrhcInstruction(ABrhcInstruction node)
    {
        defaultIn(node);
    }

    public void outABrhcInstruction(ABrhcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrhcInstruction(ABrhcInstruction node)
    {
        inABrhcInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrhcInstruction(node);
    }

    public void inABrhsInstruction(ABrhsInstruction node)
    {
        defaultIn(node);
    }

    public void outABrhsInstruction(ABrhsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrhsInstruction(ABrhsInstruction node)
    {
        inABrhsInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrhsInstruction(node);
    }

    public void inABridInstruction(ABridInstruction node)
    {
        defaultIn(node);
    }

    public void outABridInstruction(ABridInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABridInstruction(ABridInstruction node)
    {
        inABridInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABridInstruction(node);
    }

    public void inABrieInstruction(ABrieInstruction node)
    {
        defaultIn(node);
    }

    public void outABrieInstruction(ABrieInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrieInstruction(ABrieInstruction node)
    {
        inABrieInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrieInstruction(node);
    }

    public void inABrloInstruction(ABrloInstruction node)
    {
        defaultIn(node);
    }

    public void outABrloInstruction(ABrloInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrloInstruction(ABrloInstruction node)
    {
        inABrloInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrloInstruction(node);
    }

    public void inABrltInstruction(ABrltInstruction node)
    {
        defaultIn(node);
    }

    public void outABrltInstruction(ABrltInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrltInstruction(ABrltInstruction node)
    {
        inABrltInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrltInstruction(node);
    }

    public void inABrmiInstruction(ABrmiInstruction node)
    {
        defaultIn(node);
    }

    public void outABrmiInstruction(ABrmiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrmiInstruction(ABrmiInstruction node)
    {
        inABrmiInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrmiInstruction(node);
    }

    public void inABrneInstruction(ABrneInstruction node)
    {
        defaultIn(node);
    }

    public void outABrneInstruction(ABrneInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrneInstruction(ABrneInstruction node)
    {
        inABrneInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrneInstruction(node);
    }

    public void inABrplInstruction(ABrplInstruction node)
    {
        defaultIn(node);
    }

    public void outABrplInstruction(ABrplInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrplInstruction(ABrplInstruction node)
    {
        inABrplInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrplInstruction(node);
    }

    public void inABrshInstruction(ABrshInstruction node)
    {
        defaultIn(node);
    }

    public void outABrshInstruction(ABrshInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrshInstruction(ABrshInstruction node)
    {
        inABrshInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrshInstruction(node);
    }

    public void inABrtcInstruction(ABrtcInstruction node)
    {
        defaultIn(node);
    }

    public void outABrtcInstruction(ABrtcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrtcInstruction(ABrtcInstruction node)
    {
        inABrtcInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrtcInstruction(node);
    }

    public void inABrtsInstruction(ABrtsInstruction node)
    {
        defaultIn(node);
    }

    public void outABrtsInstruction(ABrtsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrtsInstruction(ABrtsInstruction node)
    {
        inABrtsInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrtsInstruction(node);
    }

    public void inABrvcInstruction(ABrvcInstruction node)
    {
        defaultIn(node);
    }

    public void outABrvcInstruction(ABrvcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrvcInstruction(ABrvcInstruction node)
    {
        inABrvcInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrvcInstruction(node);
    }

    public void inABrvsInstruction(ABrvsInstruction node)
    {
        defaultIn(node);
    }

    public void outABrvsInstruction(ABrvsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrvsInstruction(ABrvsInstruction node)
    {
        inABrvsInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outABrvsInstruction(node);
    }

    public void inABsetInstruction(ABsetInstruction node)
    {
        defaultIn(node);
    }

    public void outABsetInstruction(ABsetInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABsetInstruction(ABsetInstruction node)
    {
        inABsetInstruction(node);
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        outABsetInstruction(node);
    }

    public void inABstInstruction(ABstInstruction node)
    {
        defaultIn(node);
    }

    public void outABstInstruction(ABstInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABstInstruction(ABstInstruction node)
    {
        inABstInstruction(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outABstInstruction(node);
    }

    public void inACallInstruction(ACallInstruction node)
    {
        defaultIn(node);
    }

    public void outACallInstruction(ACallInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallInstruction(ACallInstruction node)
    {
        inACallInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outACallInstruction(node);
    }

    public void inACbiInstruction(ACbiInstruction node)
    {
        defaultIn(node);
    }

    public void outACbiInstruction(ACbiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACbiInstruction(ACbiInstruction node)
    {
        inACbiInstruction(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outACbiInstruction(node);
    }

    public void inACbrInstruction(ACbrInstruction node)
    {
        defaultIn(node);
    }

    public void outACbrInstruction(ACbrInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACbrInstruction(ACbrInstruction node)
    {
        inACbrInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outACbrInstruction(node);
    }

    public void inAClcInstruction(AClcInstruction node)
    {
        defaultIn(node);
    }

    public void outAClcInstruction(AClcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClcInstruction(AClcInstruction node)
    {
        inAClcInstruction(node);
        outAClcInstruction(node);
    }

    public void inAClhInstruction(AClhInstruction node)
    {
        defaultIn(node);
    }

    public void outAClhInstruction(AClhInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClhInstruction(AClhInstruction node)
    {
        inAClhInstruction(node);
        outAClhInstruction(node);
    }

    public void inACliInstruction(ACliInstruction node)
    {
        defaultIn(node);
    }

    public void outACliInstruction(ACliInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACliInstruction(ACliInstruction node)
    {
        inACliInstruction(node);
        outACliInstruction(node);
    }

    public void inAClnInstruction(AClnInstruction node)
    {
        defaultIn(node);
    }

    public void outAClnInstruction(AClnInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClnInstruction(AClnInstruction node)
    {
        inAClnInstruction(node);
        outAClnInstruction(node);
    }

    public void inAClrInstruction(AClrInstruction node)
    {
        defaultIn(node);
    }

    public void outAClrInstruction(AClrInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClrInstruction(AClrInstruction node)
    {
        inAClrInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAClrInstruction(node);
    }

    public void inAClsInstruction(AClsInstruction node)
    {
        defaultIn(node);
    }

    public void outAClsInstruction(AClsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClsInstruction(AClsInstruction node)
    {
        inAClsInstruction(node);
        outAClsInstruction(node);
    }

    public void inACltInstruction(ACltInstruction node)
    {
        defaultIn(node);
    }

    public void outACltInstruction(ACltInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACltInstruction(ACltInstruction node)
    {
        inACltInstruction(node);
        outACltInstruction(node);
    }

    public void inAClvInstruction(AClvInstruction node)
    {
        defaultIn(node);
    }

    public void outAClvInstruction(AClvInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClvInstruction(AClvInstruction node)
    {
        inAClvInstruction(node);
        outAClvInstruction(node);
    }

    public void inAClzInstruction(AClzInstruction node)
    {
        defaultIn(node);
    }

    public void outAClzInstruction(AClzInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClzInstruction(AClzInstruction node)
    {
        inAClzInstruction(node);
        outAClzInstruction(node);
    }

    public void inAComInstruction(AComInstruction node)
    {
        defaultIn(node);
    }

    public void outAComInstruction(AComInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComInstruction(AComInstruction node)
    {
        inAComInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAComInstruction(node);
    }

    public void inACpInstruction(ACpInstruction node)
    {
        defaultIn(node);
    }

    public void outACpInstruction(ACpInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACpInstruction(ACpInstruction node)
    {
        inACpInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outACpInstruction(node);
    }

    public void inACpcInstruction(ACpcInstruction node)
    {
        defaultIn(node);
    }

    public void outACpcInstruction(ACpcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACpcInstruction(ACpcInstruction node)
    {
        inACpcInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outACpcInstruction(node);
    }

    public void inACpiInstruction(ACpiInstruction node)
    {
        defaultIn(node);
    }

    public void outACpiInstruction(ACpiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACpiInstruction(ACpiInstruction node)
    {
        inACpiInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outACpiInstruction(node);
    }

    public void inACpseInstruction(ACpseInstruction node)
    {
        defaultIn(node);
    }

    public void outACpseInstruction(ACpseInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACpseInstruction(ACpseInstruction node)
    {
        inACpseInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outACpseInstruction(node);
    }

    public void inADecInstruction(ADecInstruction node)
    {
        defaultIn(node);
    }

    public void outADecInstruction(ADecInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecInstruction(ADecInstruction node)
    {
        inADecInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outADecInstruction(node);
    }

    public void inADesInstruction(ADesInstruction node)
    {
        defaultIn(node);
    }

    public void outADesInstruction(ADesInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADesInstruction(ADesInstruction node)
    {
        inADesInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outADesInstruction(node);
    }

    public void inAEicallInstruction(AEicallInstruction node)
    {
        defaultIn(node);
    }

    public void outAEicallInstruction(AEicallInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEicallInstruction(AEicallInstruction node)
    {
        inAEicallInstruction(node);
        outAEicallInstruction(node);
    }

    public void inAEijmpInstruction(AEijmpInstruction node)
    {
        defaultIn(node);
    }

    public void outAEijmpInstruction(AEijmpInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEijmpInstruction(AEijmpInstruction node)
    {
        inAEijmpInstruction(node);
        outAEijmpInstruction(node);
    }

    public void inAEorInstruction(AEorInstruction node)
    {
        defaultIn(node);
    }

    public void outAEorInstruction(AEorInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEorInstruction(AEorInstruction node)
    {
        inAEorInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAEorInstruction(node);
    }

    public void inAFmulInstruction(AFmulInstruction node)
    {
        defaultIn(node);
    }

    public void outAFmulInstruction(AFmulInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFmulInstruction(AFmulInstruction node)
    {
        inAFmulInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAFmulInstruction(node);
    }

    public void inAFmulsInstruction(AFmulsInstruction node)
    {
        defaultIn(node);
    }

    public void outAFmulsInstruction(AFmulsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFmulsInstruction(AFmulsInstruction node)
    {
        inAFmulsInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAFmulsInstruction(node);
    }

    public void inAFmulsuInstruction(AFmulsuInstruction node)
    {
        defaultIn(node);
    }

    public void outAFmulsuInstruction(AFmulsuInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFmulsuInstruction(AFmulsuInstruction node)
    {
        inAFmulsuInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAFmulsuInstruction(node);
    }

    public void inAIcallInstruction(AIcallInstruction node)
    {
        defaultIn(node);
    }

    public void outAIcallInstruction(AIcallInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIcallInstruction(AIcallInstruction node)
    {
        inAIcallInstruction(node);
        outAIcallInstruction(node);
    }

    public void inAIjmpInstruction(AIjmpInstruction node)
    {
        defaultIn(node);
    }

    public void outAIjmpInstruction(AIjmpInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIjmpInstruction(AIjmpInstruction node)
    {
        inAIjmpInstruction(node);
        outAIjmpInstruction(node);
    }

    public void inAInInstruction(AInInstruction node)
    {
        defaultIn(node);
    }

    public void outAInInstruction(AInInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInInstruction(AInInstruction node)
    {
        inAInInstruction(node);
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAInInstruction(node);
    }

    public void inAIncInstruction(AIncInstruction node)
    {
        defaultIn(node);
    }

    public void outAIncInstruction(AIncInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncInstruction(AIncInstruction node)
    {
        inAIncInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAIncInstruction(node);
    }

    public void inAJmpInstruction(AJmpInstruction node)
    {
        defaultIn(node);
    }

    public void outAJmpInstruction(AJmpInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpInstruction(AJmpInstruction node)
    {
        inAJmpInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outAJmpInstruction(node);
    }

    public void inALacInstruction(ALacInstruction node)
    {
        defaultIn(node);
    }

    public void outALacInstruction(ALacInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALacInstruction(ALacInstruction node)
    {
        inALacInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outALacInstruction(node);
    }

    public void inALasInstruction(ALasInstruction node)
    {
        defaultIn(node);
    }

    public void outALasInstruction(ALasInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALasInstruction(ALasInstruction node)
    {
        inALasInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outALasInstruction(node);
    }

    public void inALatInstruction(ALatInstruction node)
    {
        defaultIn(node);
    }

    public void outALatInstruction(ALatInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALatInstruction(ALatInstruction node)
    {
        inALatInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outALatInstruction(node);
    }

    public void inALdiInstruction(ALdiInstruction node)
    {
        defaultIn(node);
    }

    public void outALdiInstruction(ALdiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdiInstruction(ALdiInstruction node)
    {
        inALdiInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outALdiInstruction(node);
    }

    public void inALslInstruction(ALslInstruction node)
    {
        defaultIn(node);
    }

    public void outALslInstruction(ALslInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALslInstruction(ALslInstruction node)
    {
        inALslInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outALslInstruction(node);
    }

    public void inALsrInstruction(ALsrInstruction node)
    {
        defaultIn(node);
    }

    public void outALsrInstruction(ALsrInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALsrInstruction(ALsrInstruction node)
    {
        inALsrInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outALsrInstruction(node);
    }

    public void inAMovInstruction(AMovInstruction node)
    {
        defaultIn(node);
    }

    public void outAMovInstruction(AMovInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMovInstruction(AMovInstruction node)
    {
        inAMovInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAMovInstruction(node);
    }

    public void inAMovwInstruction(AMovwInstruction node)
    {
        defaultIn(node);
    }

    public void outAMovwInstruction(AMovwInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMovwInstruction(AMovwInstruction node)
    {
        inAMovwInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAMovwInstruction(node);
    }

    public void inAMulInstruction(AMulInstruction node)
    {
        defaultIn(node);
    }

    public void outAMulInstruction(AMulInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulInstruction(AMulInstruction node)
    {
        inAMulInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAMulInstruction(node);
    }

    public void inAMulsInstruction(AMulsInstruction node)
    {
        defaultIn(node);
    }

    public void outAMulsInstruction(AMulsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulsInstruction(AMulsInstruction node)
    {
        inAMulsInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAMulsInstruction(node);
    }

    public void inAMulsuInstruction(AMulsuInstruction node)
    {
        defaultIn(node);
    }

    public void outAMulsuInstruction(AMulsuInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulsuInstruction(AMulsuInstruction node)
    {
        inAMulsuInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAMulsuInstruction(node);
    }

    public void inANegInstruction(ANegInstruction node)
    {
        defaultIn(node);
    }

    public void outANegInstruction(ANegInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegInstruction(ANegInstruction node)
    {
        inANegInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outANegInstruction(node);
    }

    public void inANopInstruction(ANopInstruction node)
    {
        defaultIn(node);
    }

    public void outANopInstruction(ANopInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANopInstruction(ANopInstruction node)
    {
        inANopInstruction(node);
        outANopInstruction(node);
    }

    public void inAOrInstruction(AOrInstruction node)
    {
        defaultIn(node);
    }

    public void outAOrInstruction(AOrInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrInstruction(AOrInstruction node)
    {
        inAOrInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAOrInstruction(node);
    }

    public void inAOriInstruction(AOriInstruction node)
    {
        defaultIn(node);
    }

    public void outAOriInstruction(AOriInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOriInstruction(AOriInstruction node)
    {
        inAOriInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAOriInstruction(node);
    }

    public void inAOutInstruction(AOutInstruction node)
    {
        defaultIn(node);
    }

    public void outAOutInstruction(AOutInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutInstruction(AOutInstruction node)
    {
        inAOutInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAOutInstruction(node);
    }

    public void inAPopInstruction(APopInstruction node)
    {
        defaultIn(node);
    }

    public void outAPopInstruction(APopInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPopInstruction(APopInstruction node)
    {
        inAPopInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outAPopInstruction(node);
    }

    public void inAPushInstruction(APushInstruction node)
    {
        defaultIn(node);
    }

    public void outAPushInstruction(APushInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPushInstruction(APushInstruction node)
    {
        inAPushInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        outAPushInstruction(node);
    }

    public void inARcallInstruction(ARcallInstruction node)
    {
        defaultIn(node);
    }

    public void outARcallInstruction(ARcallInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARcallInstruction(ARcallInstruction node)
    {
        inARcallInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outARcallInstruction(node);
    }

    public void inARetInstruction(ARetInstruction node)
    {
        defaultIn(node);
    }

    public void outARetInstruction(ARetInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetInstruction(ARetInstruction node)
    {
        inARetInstruction(node);
        outARetInstruction(node);
    }

    public void inARetiInstruction(ARetiInstruction node)
    {
        defaultIn(node);
    }

    public void outARetiInstruction(ARetiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetiInstruction(ARetiInstruction node)
    {
        inARetiInstruction(node);
        outARetiInstruction(node);
    }

    public void inARjmpInstruction(ARjmpInstruction node)
    {
        defaultIn(node);
    }

    public void outARjmpInstruction(ARjmpInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARjmpInstruction(ARjmpInstruction node)
    {
        inARjmpInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        outARjmpInstruction(node);
    }

    public void inARolInstruction(ARolInstruction node)
    {
        defaultIn(node);
    }

    public void outARolInstruction(ARolInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARolInstruction(ARolInstruction node)
    {
        inARolInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outARolInstruction(node);
    }

    public void inARorInstruction(ARorInstruction node)
    {
        defaultIn(node);
    }

    public void outARorInstruction(ARorInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARorInstruction(ARorInstruction node)
    {
        inARorInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outARorInstruction(node);
    }

    public void inASbcInstruction(ASbcInstruction node)
    {
        defaultIn(node);
    }

    public void outASbcInstruction(ASbcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbcInstruction(ASbcInstruction node)
    {
        inASbcInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASbcInstruction(node);
    }

    public void inASbciInstruction(ASbciInstruction node)
    {
        defaultIn(node);
    }

    public void outASbciInstruction(ASbciInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbciInstruction(ASbciInstruction node)
    {
        inASbciInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASbciInstruction(node);
    }

    public void inASbiInstruction(ASbiInstruction node)
    {
        defaultIn(node);
    }

    public void outASbiInstruction(ASbiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbiInstruction(ASbiInstruction node)
    {
        inASbiInstruction(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outASbiInstruction(node);
    }

    public void inASbicInstruction(ASbicInstruction node)
    {
        defaultIn(node);
    }

    public void outASbicInstruction(ASbicInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbicInstruction(ASbicInstruction node)
    {
        inASbicInstruction(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outASbicInstruction(node);
    }

    public void inASbisInstruction(ASbisInstruction node)
    {
        defaultIn(node);
    }

    public void outASbisInstruction(ASbisInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbisInstruction(ASbisInstruction node)
    {
        inASbisInstruction(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outASbisInstruction(node);
    }

    public void inASbiwInstruction(ASbiwInstruction node)
    {
        defaultIn(node);
    }

    public void outASbiwInstruction(ASbiwInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbiwInstruction(ASbiwInstruction node)
    {
        inASbiwInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASbiwInstruction(node);
    }

    public void inASbrInstruction(ASbrInstruction node)
    {
        defaultIn(node);
    }

    public void outASbrInstruction(ASbrInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbrInstruction(ASbrInstruction node)
    {
        inASbrInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASbrInstruction(node);
    }

    public void inASbrcInstruction(ASbrcInstruction node)
    {
        defaultIn(node);
    }

    public void outASbrcInstruction(ASbrcInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbrcInstruction(ASbrcInstruction node)
    {
        inASbrcInstruction(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASbrcInstruction(node);
    }

    public void inASbrsInstruction(ASbrsInstruction node)
    {
        defaultIn(node);
    }

    public void outASbrsInstruction(ASbrsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASbrsInstruction(ASbrsInstruction node)
    {
        inASbrsInstruction(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASbrsInstruction(node);
    }

    public void inASecInstruction(ASecInstruction node)
    {
        defaultIn(node);
    }

    public void outASecInstruction(ASecInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecInstruction(ASecInstruction node)
    {
        inASecInstruction(node);
        outASecInstruction(node);
    }

    public void inASehInstruction(ASehInstruction node)
    {
        defaultIn(node);
    }

    public void outASehInstruction(ASehInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASehInstruction(ASehInstruction node)
    {
        inASehInstruction(node);
        outASehInstruction(node);
    }

    public void inASeiInstruction(ASeiInstruction node)
    {
        defaultIn(node);
    }

    public void outASeiInstruction(ASeiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeiInstruction(ASeiInstruction node)
    {
        inASeiInstruction(node);
        outASeiInstruction(node);
    }

    public void inASenInstruction(ASenInstruction node)
    {
        defaultIn(node);
    }

    public void outASenInstruction(ASenInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenInstruction(ASenInstruction node)
    {
        inASenInstruction(node);
        outASenInstruction(node);
    }

    public void inASerInstruction(ASerInstruction node)
    {
        defaultIn(node);
    }

    public void outASerInstruction(ASerInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASerInstruction(ASerInstruction node)
    {
        inASerInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASerInstruction(node);
    }

    public void inASesInstruction(ASesInstruction node)
    {
        defaultIn(node);
    }

    public void outASesInstruction(ASesInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASesInstruction(ASesInstruction node)
    {
        inASesInstruction(node);
        outASesInstruction(node);
    }

    public void inASetInstruction(ASetInstruction node)
    {
        defaultIn(node);
    }

    public void outASetInstruction(ASetInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetInstruction(ASetInstruction node)
    {
        inASetInstruction(node);
        outASetInstruction(node);
    }

    public void inASevInstruction(ASevInstruction node)
    {
        defaultIn(node);
    }

    public void outASevInstruction(ASevInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASevInstruction(ASevInstruction node)
    {
        inASevInstruction(node);
        outASevInstruction(node);
    }

    public void inASezInstruction(ASezInstruction node)
    {
        defaultIn(node);
    }

    public void outASezInstruction(ASezInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASezInstruction(ASezInstruction node)
    {
        inASezInstruction(node);
        outASezInstruction(node);
    }

    public void inASleepInstruction(ASleepInstruction node)
    {
        defaultIn(node);
    }

    public void outASleepInstruction(ASleepInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASleepInstruction(ASleepInstruction node)
    {
        inASleepInstruction(node);
        outASleepInstruction(node);
    }

    public void inASubInstruction(ASubInstruction node)
    {
        defaultIn(node);
    }

    public void outASubInstruction(ASubInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubInstruction(ASubInstruction node)
    {
        inASubInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASubInstruction(node);
    }

    public void inASubiInstruction(ASubiInstruction node)
    {
        defaultIn(node);
    }

    public void outASubiInstruction(ASubiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubiInstruction(ASubiInstruction node)
    {
        inASubiInstruction(node);
        if(node.getK() != null)
        {
            node.getK().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASubiInstruction(node);
    }

    public void inASwapInstruction(ASwapInstruction node)
    {
        defaultIn(node);
    }

    public void outASwapInstruction(ASwapInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwapInstruction(ASwapInstruction node)
    {
        inASwapInstruction(node);
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outASwapInstruction(node);
    }

    public void inATstInstruction(ATstInstruction node)
    {
        defaultIn(node);
    }

    public void outATstInstruction(ATstInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATstInstruction(ATstInstruction node)
    {
        inATstInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        if(node.getDest() != null)
        {
            node.getDest().apply(this);
        }
        outATstInstruction(node);
    }

    public void inAWdrInstruction(AWdrInstruction node)
    {
        defaultIn(node);
    }

    public void outAWdrInstruction(AWdrInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWdrInstruction(AWdrInstruction node)
    {
        inAWdrInstruction(node);
        outAWdrInstruction(node);
    }

    public void inAXchInstruction(AXchInstruction node)
    {
        defaultIn(node);
    }

    public void outAXchInstruction(AXchInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXchInstruction(AXchInstruction node)
    {
        inAXchInstruction(node);
        if(node.getSrc() != null)
        {
            node.getSrc().apply(this);
        }
        outAXchInstruction(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubExpr(node);
    }

    public void inAMulExpr(AMulExpr node)
    {
        defaultIn(node);
    }

    public void outAMulExpr(AMulExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpr(AMulExpr node)
    {
        inAMulExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMulExpr(node);
    }

    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExpr(node);
    }

    public void inAModExpr(AModExpr node)
    {
        defaultIn(node);
    }

    public void outAModExpr(AModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        inAModExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExpr(node);
    }

    public void inANotExpr(ANotExpr node)
    {
        defaultIn(node);
    }

    public void outANotExpr(ANotExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpr(ANotExpr node)
    {
        inANotExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outANotExpr(node);
    }

    public void inAAndExpr(AAndExpr node)
    {
        defaultIn(node);
    }

    public void outAAndExpr(AAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        inAAndExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExpr(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExpr(node);
    }

    public void inAXorExpr(AXorExpr node)
    {
        defaultIn(node);
    }

    public void outAXorExpr(AXorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpr(AXorExpr node)
    {
        inAXorExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAXorExpr(node);
    }

    public void inALshiftExpr(ALshiftExpr node)
    {
        defaultIn(node);
    }

    public void outALshiftExpr(ALshiftExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALshiftExpr(ALshiftExpr node)
    {
        inALshiftExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALshiftExpr(node);
    }

    public void inARshiftExpr(ARshiftExpr node)
    {
        defaultIn(node);
    }

    public void outARshiftExpr(ARshiftExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARshiftExpr(ARshiftExpr node)
    {
        inARshiftExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outARshiftExpr(node);
    }

    public void inAIntegerExpr(AIntegerExpr node)
    {
        defaultIn(node);
    }

    public void outAIntegerExpr(AIntegerExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerExpr(AIntegerExpr node)
    {
        inAIntegerExpr(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerExpr(node);
    }

    public void inADecimalExpr(ADecimalExpr node)
    {
        defaultIn(node);
    }

    public void outADecimalExpr(ADecimalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimalExpr(ADecimalExpr node)
    {
        inADecimalExpr(node);
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        outADecimalExpr(node);
    }

    public void inAConstantExpr(AConstantExpr node)
    {
        defaultIn(node);
    }

    public void outAConstantExpr(AConstantExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantExpr(AConstantExpr node)
    {
        inAConstantExpr(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAConstantExpr(node);
    }

    public void inAHereExpr(AHereExpr node)
    {
        defaultIn(node);
    }

    public void outAHereExpr(AHereExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHereExpr(AHereExpr node)
    {
        inAHereExpr(node);
        outAHereExpr(node);
    }

    public void inAAddressExpr(AAddressExpr node)
    {
        defaultIn(node);
    }

    public void outAAddressExpr(AAddressExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressExpr(AAddressExpr node)
    {
        inAAddressExpr(node);
        if(node.getRegister() != null)
        {
            node.getRegister().apply(this);
        }
        outAAddressExpr(node);
    }

    public void inAIoaddressExpr(AIoaddressExpr node)
    {
        defaultIn(node);
    }

    public void outAIoaddressExpr(AIoaddressExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIoaddressExpr(AIoaddressExpr node)
    {
        inAIoaddressExpr(node);
        if(node.getRegister() != null)
        {
            node.getRegister().apply(this);
        }
        outAIoaddressExpr(node);
    }

    public void inAIndexExpr(AIndexExpr node)
    {
        defaultIn(node);
    }

    public void outAIndexExpr(AIndexExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexExpr(AIndexExpr node)
    {
        inAIndexExpr(node);
        if(node.getBit() != null)
        {
            node.getBit().apply(this);
        }
        if(node.getRegister() != null)
        {
            node.getRegister().apply(this);
        }
        outAIndexExpr(node);
    }

    public void inAMaskExpr(AMaskExpr node)
    {
        defaultIn(node);
    }

    public void outAMaskExpr(AMaskExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaskExpr(AMaskExpr node)
    {
        inAMaskExpr(node);
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getBits());
            Collections.reverse(copy);
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRegister() != null)
        {
            node.getRegister().apply(this);
        }
        outAMaskExpr(node);
    }

    public void inAOffsetExpr(AOffsetExpr node)
    {
        defaultIn(node);
    }

    public void outAOffsetExpr(AOffsetExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOffsetExpr(AOffsetExpr node)
    {
        inAOffsetExpr(node);
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        outAOffsetExpr(node);
    }

    public void inALowExpr(ALowExpr node)
    {
        defaultIn(node);
    }

    public void outALowExpr(ALowExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALowExpr(ALowExpr node)
    {
        inALowExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outALowExpr(node);
    }

    public void inAHighExpr(AHighExpr node)
    {
        defaultIn(node);
    }

    public void outAHighExpr(AHighExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHighExpr(AHighExpr node)
    {
        inAHighExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAHighExpr(node);
    }

    public void inAPageExpr(APageExpr node)
    {
        defaultIn(node);
    }

    public void outAPageExpr(APageExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPageExpr(APageExpr node)
    {
        inAPageExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAPageExpr(node);
    }

    public void inAByte3Expr(AByte3Expr node)
    {
        defaultIn(node);
    }

    public void outAByte3Expr(AByte3Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByte3Expr(AByte3Expr node)
    {
        inAByte3Expr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAByte3Expr(node);
    }

    public void inAByte4Expr(AByte4Expr node)
    {
        defaultIn(node);
    }

    public void outAByte4Expr(AByte4Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByte4Expr(AByte4Expr node)
    {
        inAByte4Expr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAByte4Expr(node);
    }

    public void inALwrdExpr(ALwrdExpr node)
    {
        defaultIn(node);
    }

    public void outALwrdExpr(ALwrdExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALwrdExpr(ALwrdExpr node)
    {
        inALwrdExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outALwrdExpr(node);
    }

    public void inAHwrdExpr(AHwrdExpr node)
    {
        defaultIn(node);
    }

    public void outAHwrdExpr(AHwrdExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHwrdExpr(AHwrdExpr node)
    {
        inAHwrdExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAHwrdExpr(node);
    }

    public void inAQ7Expr(AQ7Expr node)
    {
        defaultIn(node);
    }

    public void outAQ7Expr(AQ7Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQ7Expr(AQ7Expr node)
    {
        inAQ7Expr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAQ7Expr(node);
    }

    public void inAQ15Expr(AQ15Expr node)
    {
        defaultIn(node);
    }

    public void outAQ15Expr(AQ15Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQ15Expr(AQ15Expr node)
    {
        inAQ15Expr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAQ15Expr(node);
    }

    public void inAIntExpr(AIntExpr node)
    {
        defaultIn(node);
    }

    public void outAIntExpr(AIntExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpr(AIntExpr node)
    {
        inAIntExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAIntExpr(node);
    }

    public void inAFracExpr(AFracExpr node)
    {
        defaultIn(node);
    }

    public void outAFracExpr(AFracExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFracExpr(AFracExpr node)
    {
        inAFracExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAFracExpr(node);
    }

    public void inAAbsExpr(AAbsExpr node)
    {
        defaultIn(node);
    }

    public void outAAbsExpr(AAbsExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbsExpr(AAbsExpr node)
    {
        inAAbsExpr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAAbsExpr(node);
    }

    public void inAExp2Expr(AExp2Expr node)
    {
        defaultIn(node);
    }

    public void outAExp2Expr(AExp2Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp2Expr(AExp2Expr node)
    {
        inAExp2Expr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAExp2Expr(node);
    }

    public void inALog2Expr(ALog2Expr node)
    {
        defaultIn(node);
    }

    public void outALog2Expr(ALog2Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALog2Expr(ALog2Expr node)
    {
        inALog2Expr(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outALog2Expr(node);
    }
}
